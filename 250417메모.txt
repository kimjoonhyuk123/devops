1. GitHub Actions & CI/CD 자동화
 # CI/CD 파이프라인 설계란
 -> "코드 -> 테스트 -> 빌드 -> 배포" 흐름을 예상하고 
 -> 그에 맞춰 .yml로 작성하는 것

 # .yml은 설계 결과물이고,
 -> 설계의 핵심은 자동화 흐름을 내가 구성하는 데 있다.
 # GiHub Actions는
 -> ci.yml에 작성된 명령을 기반으로
 -> push 시 자동으로 실행 (예: pytest, decker build)

2. .yml을 읽는 도구들
 # GitHub Actions 말고도 .yml을 쓰는 대표 도구:
 -> docker-compose.yml: 여러 컨테이너 실행 정의
 -> Kubernetes YAML: 대규모 컨테이너 오케스트레이션
 -> GitLab CI, Ansible, Terraform 등에서도 활용됨
 #도구마다 .yml 문법은 다르지만, → 목적은 자동화 & 선언형 구성

3. Docker 개념 정리
 # Dockerfile: 컨테이너 이미지 만드는 “설명서”
 # docker build: Dockerfile을 읽어 실제 이미지 만드는 명령어
 # docker-compose.yml: 여러 이미지를 조합해 컨테이너들을 동시에 실행
 # docker-compose up: .yml 기반으로 컨테이너들 실행

4. Kubernetes 관련 개념 정리
 # Kubernetes는 docker-compose.yml을 쓰지 않음 → 자체 .yaml 형식의 Manifest로 구성
 # Compose는 주로 개발/테스트 용도(소규모)
 # Kubernetes는 운영 환경/배포 환경 전용

5. DevOps 엔지니어의 역할 재정의
 # CI/CD 자동화 설계
 # .yml, Docker, 서버 셸스크립트 직접 작성
 # 클라우드 환경 (AWS EC2, S3, IAM 등) 설정
 # 테스트/배포/모니터링 자동화
 # 개발자와 운영자 사이의 연결 다리 역할

6. 클라우드는 DevOps에 필수
 # 지금 대부분의 배포 환경은 클라우드 기반 (AWS, GCP, Azure)
 # DevOps는 자동화를 클라우드 위에 얹는 역할
 # 클라우드 없이 DevOps는 반쪽짜리라는 걸 인지함

CI/CD: 개발,배포 흐름을 자동화된 파이프라인으로 설계하는 것
컨테이너화: docker
배포자동화: github Actions
버전관리와 협업: git브랜치


# 컨테이너란 무엇인가
애플리케이션과 그 실행환경을 함께 패키징해서 어디서든 일관되게 실행할 수 있도록 만든 것
보통 docker 이미지로 빌드한 후, 그 이미지를 실행한 결과를 컨테이너.

# dockerfile: 이미지화 설명서
컨테이너 이미지를 만들기 위한 설명서.
애플리케이션이 설행되기 위해 필요한 환경, 파일, 명령어 등을 정의한 텍스트 파일
애플리케이션과 그 실행환경을 이미지화하려는 설명서가 dockerfile


